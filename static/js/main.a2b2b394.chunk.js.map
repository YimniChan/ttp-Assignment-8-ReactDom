{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","handleColor","color","state","setState","style","backgroundColor","this","onClick","Component","TableRow","tableCells","i","column","push","Table","row","tableRows","App","handleAddEvent","e","target","value","handleRemEvent","console","log","selectedColor","bind","className","id","onChange","selected","disabled","hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2b2b394.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TableCell extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            color:this.props.color,\n        };\n        //this.handleColor = this.handleColor.bind(this);\n    }\n\n    handleColor=()=> {\n        if (this.props.color != this.state.color ) {\n          this.setState({ color: this.props.color});\n        }\n    }\n\n    render() {\n        return(\n        <td style={{ backgroundColor: this.state.color}} \n        onClick={this.handleColor}></td>\n        )\n    }\n}\n\nexport default TableCell;\n\n","import React, { Component } from \"react\";\nimport TableCell from \"./TableCell\";\nimport Table from \"./Table\";\n\nclass TableRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color:this.props.color,\n    };\n  }\n  componentDidUpdate() {\n    if (\n      this.props.color != this.state.color \n    ) {\n      this.setState({ color: this.props.color});\n    }\n  }\n\n  render() {\n    let tableCells = []; // pushing the columns\n    for (let i = 0; i < this.props.column; i++) {\n      tableCells.push(<TableCell color={this.state.color} />);\n    }\n    return <tr>{tableCells}</tr>;\n  }\n}\nexport default TableRow;\n","import React, { Component } from \"react\";\n\nimport TableRow from \"./TableRow\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color:this.props.color,\n      row: this.props.row,\n      column: this.props.row\n    };\n    // this.handleAddEvent = this.handleAddEvent.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (\n      // if the props and state are different, update the state\n      this.props.column != this.state.column ||\n      this.props.row != this.state.row ||\n      this.props.color != this.state.color \n    ) {\n      this.setState({ row: this.props.row, column: this.props.column, color: this.props.color});\n    }\n  }\n\n  render() {\n    let tableRows = [];\n    for (let i = 0; i < this.state.row; i++) {\n      tableRows.push(<TableRow column={this.state.column}  color={this.state.color}/>);\n    } // this for loop is for pushing all of the rows into an array, so I can render it.\n    return (\n      <table>\n        <tbody>{tableRows}</tbody>\n      </table>\n    );\n  }\n\n  // <table id=\"table\"></table>\n}\nexport default Table;\n","import React, { Component } from \"react\";\nimport { Table, TableCell, TableRow } from \"./components\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color:\"#FFFFFF\",\n      row: 1,\n      column: 1\n    };\n    this.handleAddEvent = this.handleAddEvent.bind(this);\n    this.handleRemEvent = this.handleRemEvent.bind(this);\n    this.selectedColor = this.selectedColor.bind(this);\n  }\n\n  handleAddEvent = e => {\n    if (e.target.value === \"addR\") {\n      this.setState({\n        row: this.state.row + 1\n      });\n    } else if (e.target.value === \"addC\") {\n      this.setState({\n        column: this.state.column + 1\n      });\n    }\n  };\n\n  handleRemEvent = e => {\n    if (e.target.value === \"remR\") {\n      if (this.state.row > 1) {\n        this.setState({\n          row: this.state.row - 1\n        });\n      } else {\n        console.log(\"no bueno\");\n      }\n    } else if (e.target.value === \"remC\") {\n      if (this.state.column > 1) {\n        this.setState({\n          column: this.state.column - 1\n        });\n      } else {\n        console.log(\"No bueno\");\n      }\n    }\n  };\n\n  selectedColor = (color) =>{\n    this.setState({\n      color: color.target.value\n    });\n    console.log(\"App event handler \" + this.state.color)\n  }\n  \n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <h1>Grid</h1>\n          <div>\n            <button value=\"addR\" onClick={this.handleAddEvent}>\n              Add Row\n            </button>\n            <button value=\"addC\" onClick={this.handleAddEvent}>\n              Add Column\n            </button>\n            <button value=\"remR\" onClick={this.handleRemEvent}>\n              Remove Row\n            </button>\n            <button value=\"remC\" onClick={this.handleRemEvent}>\n              Remove Column\n            </button>\n          </div>\n          <div>\n            <p>Select a cell color: \n              <select id = \"color-select\"  onChange={this.selectedColor}>\n                <option value=\"\" selected disabled hidden>Select Color:</option>\n                <option value=\"#CCCCFF\">Lavender Blue</option>\n                <option value=\"#FFCCD9\">Pink Lace </option>\n                <option value=\"#CCFFCC\">Snowy Mint</option>\n                <option value=\"#CCF2FF\">Pattens Blue</option>\n              </select>\n            </p>\n          </div>\n        </div>\n        <Table row={this.state.row} column={this.state.column} color={this.state.color}/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}